<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pj.flow.mapper.FlowRecruitMapper" >
  <resultMap id="BaseResultMap" type="com.pj.flow.pojo.FlowRecruit" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="apply_id" property="applyId" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="apply_date" property="applyDate" jdbcType="TIMESTAMP" />
    <result column="company_id" property="companyId" jdbcType="INTEGER" />
    <result column="post_id" property="postId" jdbcType="INTEGER" />
    <result column="demp_id" property="dempId" jdbcType="INTEGER" />
    <result column="position_id" property="positionId" jdbcType="INTEGER" />
    <result column="is_demp_leader" property="isDempLeader" jdbcType="INTEGER" />
    <result column="is_company_leader" property="isCompanyLeader" jdbcType="INTEGER" />
    <result column="need_num" property="needNum" jdbcType="INTEGER" />
    <result column="work_address" property="workAddress" jdbcType="VARCHAR" />
    <result column="apply_reason_type" property="applyReasonType" jdbcType="INTEGER" />
    <result column="apply_reason_child_type" property="applyReasonChildType" jdbcType="INTEGER" />
    <result column="apply_reason" property="applyReason" jdbcType="VARCHAR" />
    <result column="replace_id" property="replaceId" jdbcType="INTEGER" />
    <result column="channel" property="channel" jdbcType="INTEGER" />
    <result column="sex" property="sex" jdbcType="INTEGER" />
    <result column="age" property="age" jdbcType="VARCHAR" />
    <result column="education" property="education" jdbcType="VARCHAR" />
    <result column="duty" property="duty" jdbcType="VARCHAR" />
    <result column="technology" property="technology" jdbcType="VARCHAR" />
    <result column="knowledge" property="knowledge" jdbcType="VARCHAR" />
    <result column="business_ability" property="businessAbility" jdbcType="VARCHAR" />
    <result column="special_ability" property="specialAbility" jdbcType="VARCHAR" />
    <result column="experience" property="experience" jdbcType="VARCHAR" />
    <result column="other_demand" property="otherDemand" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="result" property="result" jdbcType="INTEGER" />
    <result column="entry_num" property="entryNum" jdbcType="INTEGER" />
    <result column="leader_id" property="leaderId" jdbcType="INTEGER" />
    <result column="offer_range" property="offerRange" jdbcType="VARCHAR" />
    <result column="is_check" property="isCheck" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <!-- 查询使用 -->
	<result column="replaceName" property="replaceName" jdbcType="VARCHAR" />
	<result column="replaceOffer" property="replaceOffer" jdbcType="VARCHAR" />
	<result column="leaderName" property="leaderName" jdbcType="VARCHAR" />
	<result column="companyName" property="companyName" jdbcType="VARCHAR" />
	<result column="applyDempId" property="applyDempId" jdbcType="VARCHAR" />
	<result column="dempName" property="dempName" jdbcType="VARCHAR" />
	<result column="postName" property="postName" jdbcType="VARCHAR" />
	<result column="positionName" property="positionName" jdbcType="VARCHAR" />
	<result column="applyDateStr" property="applyDateStr" jdbcType="VARCHAR" />
	<result column="entryDateStr" property="entryDateStr" jdbcType="VARCHAR" />
	<result column="entryId" property="entryId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, apply_id, username, apply_date, company_id, post_id, demp_id, position_id, is_demp_leader, 
    is_company_leader, need_num, work_address, apply_reason_type, apply_reason_child_type, apply_reason, replace_id, channel, sex, age, education, 
    duty, technology, knowledge, business_ability, special_ability, experience, other_demand, 
    state, result, entry_num, leader_id, offer_range, is_check, status
  </sql>
  <select id="selectById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		SELECT r.*, pn.name AS positionName, c.name AS companyName,
		d.name AS dempName, p.name AS postName, ul.username AS leaderName, 
		ur.username AS replaceName, s.total_salary AS replaceOffer FROM flow_recruit r,d.id demp_id
		<!-- LEFT JOIN t_user u ON r.apply_id = u.id -->
		LEFT JOIN t_user ur ON r.replace_id = ur.id
		LEFT JOIN t_salary s ON s.user_id = ur.id AND s.salary_type = 3
		LEFT JOIN t_user ul ON r.leader_id = ul.id
		LEFT JOIN t_company c ON c.id = r.company_id
		LEFT JOIN t_demp d ON d.id = r.demp_id
		LEFT JOIN t_post p ON p.id = r.post_id
		LEFT JOIN t_position pn ON pn.id = r.position_id
		where r.id = #{id}
	</select>
	<select id="selectTodoByInRecruit" resultMap="BaseResultMap">
		select r.id, r.apply_id, r.apply_date, r.username, r.need_num, r.entry_num, 
		DATE_FORMAT(r.apply_date,"%Y-%m-%d") as applyDateStr,demp.name dempName,demp.id dempId,
		c.name as companyName, pn.name as positionName,post.name postName
		<!-- ,entry.id entryId -->
		<!-- COALESCE (pd.name + "-", d.name) as dempName,  -->
		from flow_recruit r
			<!-- left join flow_entry entry on entry.recruit_id = r.id -->
			inner join t_user u on u.id = r.apply_id
				<if test="companyId != null" >
			        and u.companyid = #{companyId}
			    </if>
			LEFT JOIN t_company c ON c.id = u.companyid
			<!-- LEFT JOIN t_demp d ON d.id = r.demp_id
			LEFT JOIN t_demp pd ON d.pId is not null and pd.id = d.pId -->
			LEFT JOIN t_position pn ON pn.id = r.position_id
			LEFT JOIN t_demp demp on demp.id = r.demp_id
			LEFT JOIN t_post post on r.post_id = post.id
		where r.status = 0 
		and r.id in 
			(select rt.recruit_id from flow_recruit_todo rt 
			where rt.state = #{state} and rt.status = 0)
		
		<if test="username != null and username != ''" >
	        and r.username LIKE CONCAT('%',#{username},'%')
	    </if>
		and r.post_id in 
	  		(select au.postid from auth_user au where au.userid = #{userId})
	  	ORDER BY r.apply_date DESC
	</select>
	<select id="selectTodoByQuery" resultMap="BaseResultMap">
		select r.id, r.apply_id, r.username, r.need_num, r.entry_num, 
		DATE_FORMAT(r.apply_date,"%Y-%m-%d") as applyDateStr,demp.name dempName,demp.id dempId,
		c.name as companyName, pn.name as positionName, entry.id entryId,post.name postName
		<!-- COALESCE (pd.name + "-", d.name) as dempName,  -->
		from flow_recruit r
			left join flow_entry entry on entry.recruit_id = r.id AND entry.state=1
			inner join t_user u on u.id = r.apply_id
				<if test="companyId != null" >
			        and u.companyid = #{companyId}
			    </if>
			LEFT JOIN t_company c ON c.id = u.companyid
			<!-- LEFT JOIN t_demp d ON d.id = r.demp_id
			LEFT JOIN t_demp pd ON d.pId is not null and pd.id = d.pId -->
			LEFT JOIN t_position pn ON pn.id = r.position_id
			LEFT JOIN t_demp demp on demp.id = r.demp_id
			LEFT JOIN t_post post on post.id = r.post_id
		where r.status = 0 
		and r.id in 
			(select rt.recruit_id from flow_recruit_todo rt 
			where rt.state = #{state} and rt.status = 0)
		
		<if test="username != null and username != ''" >
	        and r.username LIKE CONCAT('%',#{username},'%')
	    </if>
		and r.post_id in 
	  		(select au.postid from auth_user au where au.userid = #{userId})
	  	ORDER BY r.apply_date DESC
	</select>
	<select id="selectTodoByEntryQuery" resultMap="BaseResultMap">
		select 
		r.id, r.apply_id, e.name username, r.need_num, r.entry_num, 
			DATE_FORMAT(r.apply_date,"%Y-%m-%d") as applyDateStr, 
			DATE_FORMAT(e.entry_date,"%Y-%m-%d") as entryDateStr, 
			c.name as companyName, pn.name as positionName, demp.name dempName,demp.id dempId,
			rt.entry_id as entryId,post.name postName from flow_recruit_todo rt
		inner join flow_recruit r on r.id = rt.recruit_id 
		
		LEFT JOIN t_demp demp on demp.id = r.demp_id
			<if test="companyId != null" >
		        and r.company_id = #{companyId}
		    </if>
			<if test="username != null and username != ''" >
		        and r.username LIKE CONCAT('%',#{username},'%')
		    </if> 
		    and r.post_id in 
		  		(select au.postid from auth_user au where au.userid = #{userId})
		left join flow_entry e on e.id = rt.entry_id
		left join t_user u on u.id = r.apply_id
		LEFT JOIN t_company c ON c.id = u.companyid
		LEFT JOIN t_position pn ON pn.id = r.position_id
		LEFT JOIN t_post post ON post.id = r.post_id
		where 
			rt.state = #{state} and rt.status = 0
		AND e.is_send_offer = 0
		ORDER BY e.apply_date DESC
	</select>
	<select id="selectByApplyId" resultMap="BaseResultMap">
		SELECT r.id, r.apply_id, r.username, r.demp_id as applyDempId, DATE_FORMAT(r.apply_date,"%Y-%m-%d") AS applyDateStr,
		c.name AS companyName, r.state, r.result
		FROM flow_recruit r 
		inner JOIN t_user u ON u.id = r.apply_id
		<if test="companyId != null" >
	        and u.companyid = #{companyId}
	    </if>
		LEFT JOIN t_company c ON c.id = r.company_id
		WHERE 1 = 1
		<if test="applyId != null" >
	        and r.apply_id = #{applyId}
	    </if>
		<if test="username != null and username != ''" >
	        and r.username LIKE CONCAT('%',#{username},'%') 
	    </if>
	     ORDER BY r.apply_date DESC
	</select>
	<select id="getUserInfo" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		SELECT r.id, r.company_id, r.post_id, r.position_id, r.demp_id, 
		r.leader_id, r.offer_range, pt.name AS positionName, c.name AS companyName,
		d.name AS dempName, p.name AS postName, u.username AS leaderName
		FROM flow_recruit r 
		LEFT JOIN t_company c ON c.id = r.company_id
		LEFT JOIN t_demp d ON d.id = r.demp_id
		LEFT JOIN t_post p ON p.id = r.post_id
		LEFT JOIN t_position pt ON pt.id = r.position_id
		LEFT JOIN t_user u ON u.id = r.leader_id
		WHERE r.id = #{id} AND r.STATUS = 0
	</select>
	<update id="updateStatus" parameterType="java.lang.Integer">
	 update flow_recruit set status = 1 where id = #{id}
	</update>
	
	<select id="selectEntryNum" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		SELECT r.* FROM flow_recruit r LEFT JOIN flow_entry e ON e.recruit_id = r.id where e.id = #{id}
	</select>
	
</mapper>